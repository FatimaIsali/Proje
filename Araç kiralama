using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace AracKiralamaSistemi
{
    #region - Arayüzler (Interfaces)

    // Araç ve Kiralama işlemlerini soyutlamak için arayüzler
    public interface IKiralama
    {
        decimal KiralamaUcretiHesapla(int kiralamaGunleri);
        decimal GecikmeFaiziHesapla(int gecikmeGunleri);
    }

    public interface IArac
    {
        string AracAdi { get; }
        string Marka { get; }
        string Model { get; }
        bool MüsaitMi { get; }
        decimal GunlukKiralamaFiyati { get; }
        string Kategori { get; }

        void MüsaitlikDegistir(bool yeniDurum);
    }

    #endregion

    #region - Arac (Vehicle)

    // Araç sınıfı: IArac, IKiralama arayüzlerini implement ediyor
    public class Arac : IArac, IComparable<Arac>, IKiralama
    {
        public string AracAdi { get; private set; }
        public string Marka { get; private set; }
        public string Model { get; private set; }
        public bool MüsaitMi { get; private set; }
        public decimal GunlukKiralamaFiyati { get; private set; }
        public string Kategori { get; private set; }

        public Arac(string aracAdi, string marka, string model, decimal gunlukKiralamaFiyati, string kategori)
        {
            AracAdi = aracAdi;
            Marka = marka;
            Model = model;
            MüsaitMi = true;
            GunlukKiralamaFiyati = gunlukKiralamaFiyati;
            Kategori = kategori;
        }

        public decimal KiralamaUcretiHesapla(int kiralamaGunleri)
        {
            decimal indirim = 0;
            if (Kategori == "Lüks") indirim = 0.10m;
            if (Kategori == "Ekonomik") indirim = 0.05m;

            return kiralamaGunleri * GunlukKiralamaFiyati * (1 - indirim);
        }

        public decimal GecikmeFaiziHesapla(int gecikmeGunleri)
        {
            return gecikmeGunleri > 0 ? GunlukKiralamaFiyati * gecikmeGunleri * 0.05m : 0;
        }

        public void MüsaitlikDegistir(bool yeniDurum)
        {
            MüsaitMi = yeniDurum;
        }

        public int CompareTo(Arac other)
        {
            return this.GunlukKiralamaFiyati.CompareTo(other.GunlukKiralamaFiyati);
        }
    }

    #endregion

    #region - Kullanıcı (User)

    public class Kullanici
    {
        public string KullaniciAdi { get; set; }
        public string Soyadi { get; set; }
        public string TelefonNumarasi { get; set; }
        public string Parola { get; set; }
        public string Email { get; set; }

        public Kullanici(string kullaniciAdi, string soyadi, string telefonNumarasi, string parola, string email)
        {
            KullaniciAdi = kullaniciAdi;
            Soyadi = soyadi;
            TelefonNumarasi = telefonNumarasi;
            Parola = parola;
            Email = email;
        }

        public void KullaniciBilgileriniYazdir()
        {
            Console.WriteLine($"Kullanıcı Adı: {KullaniciAdi}");
            Console.WriteLine($"Soyadı: {Soyadi}");
            Console.WriteLine($"Telefon Numarası: {TelefonNumarasi}");
            Console.WriteLine($"E-posta: {Email}");
        }

        public bool TelefonNumarasiDogruMu()
        {
            var regex = new Regex(@"^\d{10}$");
            return regex.IsMatch(TelefonNumarasi);
        }
    }

    #endregion

    #region - Kiralama (Rental)

    // Kiralama sınıfı
    public class Kiralama
    {
        public Arac KiralananArac { get; set; }
        public Kullanici Kiralayan { get; set; }
        public DateTime BaslangicTarihi { get; set; }
        public DateTime BitisTarihi { get; set; }
        public int KiralamaGunleri => (BitisTarihi - BaslangicTarihi).Days;
        public decimal KiralamaUcreti => KiralananArac.KiralamaUcretiHesapla(KiralamaGunleri);
        public int GecikmeGunleri { get; set; }
        public decimal GecikmeFaizi => KiralananArac.GecikmeFaiziHesapla(GecikmeGunleri);

        public Kiralama(Arac kiralananArac, Kullanici kiralayan, DateTime baslangicTarihi, DateTime bitisTarihi)
        {
            KiralananArac = kiralananArac;
            Kiralayan = kiralayan;
            BaslangicTarihi = baslangicTarihi;
            BitisTarihi = bitisTarihi;
            GecikmeGunleri = 0;
        }

        public void KiralamayiBaslat()
        {
            KiralananArac.MüsaitlikDegistir(false);
            Console.WriteLine($"Kiralama başlatıldı: {KiralananArac.AracAdi} ({BaslangicTarihi.ToShortDateString()} - {BitisTarihi.ToShortDateString()})");
            Console.WriteLine($"Toplam Kiralama Ücreti: {KiralamaUcreti:C}");
        }

        public void KiralamayiTamamla(DateTime teslimTarihi)
        {
            KiralananArac.MüsaitlikDegistir(true);
            GecikmeGunleri = (teslimTarihi - BitisTarihi).Days;
            decimal toplamUcret = KiralamaUcreti + GecikmeFaizi;
            Console.WriteLine($"Kiralama tamamlandı. Teslim tarihi: {teslimTarihi.ToShortDateString()}");
            if (GecikmeGunleri > 0)
            {
                Console.WriteLine($"Geç teslimat nedeniyle {GecikmeGunleri} gün gecikme faizi eklendi.");
            }
            Console.WriteLine($"Toplam Ücret (Gecikme Faizi Dahil): {toplamUcret:C}");
        }
    }

    #endregion

    #region - Kiralama Sistemi (Rental System)

    public class AracKiralamaSistemi
    {
        private List<Arac> mevcutAraclar;
        private List<Kullanici> kullanicilar;
        private Kullanici aktifKullanici;

        public AracKiralamaSistemi()
        {
            mevcutAraclar = new List<Arac>();
            kullanicilar = new List<Kullanici>();
            aktifKullanici = null;
        }

        public void KullaniciEkle()
        {
            try
            {
                Console.WriteLine("Kullanıcı adı: ");
                string kullaniciAdi = Console.ReadLine();

                Console.WriteLine("Soyadı: ");
                string soyadi = Console.ReadLine();

                Console.WriteLine("Telefon numarası (10 haneli): ");
                string telefonNumarasi = Console.ReadLine();

                if (!Regex.IsMatch(telefonNumarasi, @"^\d{10}$"))
                {
                    Console.WriteLine("Telefon numarası geçersiz! Lütfen 10 haneli bir telefon numarası girin.");
                    return;
                }

                Console.WriteLine("Parola: ");
                string parola = Console.ReadLine();

                Console.WriteLine("E-posta: ");
                string email = Console.ReadLine();

                var kullanici = new Kullanici(kullaniciAdi, soyadi, telefonNumarasi, parola, email);
                kullanicilar.Add(kullanici);
                Console.WriteLine($"Kullanıcı {kullaniciAdi} başarıyla kaydedildi!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Hata oluştu: {ex.Message}");
            }
        }

        public void AracEkle(string aracAdi, string marka, string model, decimal gunlukKiralamaFiyati, string kategori)
        {
            mevcutAraclar.Add(new Arac(aracAdi, marka, model, gunlukKiralamaFiyati, kategori));
        }

        public void MevcutAraclariGoster()
        {
            Console.WriteLine("Müsait Araçlar:");
            var araclar = mevcutAraclar.Where(a => a.MüsaitMi).OrderBy(a => a).ToList();
            foreach (var arac in araclar)
            {
                Console.WriteLine($"Araç: {arac.AracAdi}, Marka: {arac.Marka}, Model: {arac.Model}, Kategori: {arac.Kategori}, Fiyat: {arac.GunlukKiralamaFiyati:C}");
            }
        }

        public void KullaniciGiris()
        {
            Console.WriteLine("Kullanıcı adı: ");
            string kullaniciAdi = Console.ReadLine();
            aktifKullanici = kullanicilar.FirstOrDefault(k => k.KullaniciAdi == kullaniciAdi);

            if (aktifKullanici == null)
            {
                Console.WriteLine("Kullanıcı bulunamadı.");
                return;
            }
            Console.WriteLine($"Hoş geldiniz {aktifKullanici.KullaniciAdi}!");
        }

        public Kiralama RezervasyonYap(string aracAdi, DateTime baslangicTarihi, DateTime bitisTarihi)
        {
            if (aktifKullanici == null)
            {
                Console.WriteLine("Lütfen giriş yapın.");
                return null;
            }

            var arac = mevcutAraclar.FirstOrDefault(a => a.AracAdi.Equals(aracAdi, StringComparison.OrdinalIgnoreCase) && a.MüsaitMi);
            if (arac != null)
            {
                var kiralama = new Kiralama(arac, aktifKullanici, baslangicTarihi, bitisTarihi);
                Console.WriteLine("Araç başarıyla rezerve edildi.");
                return kiralama;
            }
            else
            {
                Console.WriteLine("Bu araç şu an müsait değil.");
                return null;
            }
        }

        public void TeslimatVeOdeme(Kiralama kiralama, DateTime teslimTarihi)
        {
            if (kiralama != null)
            {
                kiralama.KiralamayiTamamla(teslimTarihi);
            }
            else
            {
                Console.WriteLine("Geçerli bir kiralama bulunamadı.");
            }
        }
    }

    #endregion

    #region - Ana Program

    public class Program
    {
        static void Main()
        {
            var kiralamaSistemi = new AracKiralamaSistemi();
            kiralamaSistemi.AracEkle("BMW X5", "BMW", "X5", 500, "SUV");
            kiralamaSistemi.AracEkle("Audi A4", "Audi", "A4", 400, "Sedan");
            kiralamaSistemi.AracEkle("Mercedes C-Class", "Mercedes", "C-Class", 450, "Sedan");

            while (true)
            {
                Console.WriteLine("\n1. Kullanıcı Ekle");
                Console.WriteLine("2. Kullanıcı Girişi");
                Console.WriteLine("3. Araçları Göster");
                Console.WriteLine("4. Araç Kirala");
                Console.WriteLine("5. Kiralamayı Tamamla");
                Console.WriteLine("6. Çıkış");

                int secim = int.Parse(Console.ReadLine());

                switch (secim)
                {
                    case 1:
                        kiralamaSistemi.KullaniciEkle();
                        break;
                    case 2:
                        kiralamaSistemi.KullaniciGiris();
                        break;
                    case 3:
                        kiralamaSistemi.MevcutAraclariGoster();
                        break;
                    case 4:
                        Console.WriteLine("Kiralamak istediğiniz aracın adını girin:");
                        string aracAdi = Console.ReadLine();

                        Console.WriteLine("Başlangıç tarihi (YYYY-MM-DD): ");
                        DateTime baslangicTarihi = DateTime.Parse(Console.ReadLine());

                        Console.WriteLine("Bitiş tarihi (YYYY-MM-DD): ");
                        DateTime bitisTarihi = DateTime.Parse(Console.ReadLine());

                        var kiralama = kiralamaSistemi.RezervasyonYap(aracAdi, baslangicTarihi, bitisTarihi);
                        break;
                    case 5:
                        Console.WriteLine("Teslim tarihi (YYYY-MM-DD): ");
                        DateTime teslimTarihi = DateTime.Parse(Console.ReadLine());

                        kiralamaSistemi.TeslimatVeOdeme(kiralama, teslimTarihi);
                        break;
                    case 6:
                        return;
                    default:
                        Console.WriteLine("Geçersiz seçim.");
                        break;
                }
            }
        }
    }

    #endregion
}
